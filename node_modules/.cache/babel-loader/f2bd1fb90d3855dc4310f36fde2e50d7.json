{"ast":null,"code":"var _jsxFileName = \"/Users/javiercosio/Documents/ITC/tweet-react-project/src/components/List.js\",\n    _s = $RefreshSig$();\n\nimport { useContext, useEffect, useState } from \"react\";\nimport \"../App.css\";\nimport axios from \"axios\";\nimport AppContext from \"../context/AppContext\";\nimport firebase from \"../lib/firebase\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction List() {\n  _s();\n\n  const appContext = useContext(AppContext);\n  const [tweetArrayDB, setTweetArrayDB] = useState([]);\n  useEffect(() => {\n    // axios\n    //   .get(\n    //     \"https://micro-blogging-dot-full-stack-course-services.ew.r.appspot.com/tweet\"\n    //   )\n    //   .then((res) => {\n    //     appContext.setTweetsDB(res.data.tweets);\n    //   });\n    const dbRef = firebase.database().ref();\n    dbRef.child(\"tweets\").get().then(snapshot => {\n      if (snapshot.exists()) {\n        //console.log(snapshot.val());\n        //console.log(Object.values(snapshot.val()));\n        setTweetArrayDB(Object.values(snapshot.val()));\n      } else {\n        console.log(\"No data available\");\n      }\n    }).catch(error => {\n      console.error(error);\n    });\n  }); // useEffect(() => {\n  //   console.log(tweetArrayDB);\n  // }, [])\n  // setTweetArrayDB((prevState) => {\n  //   return [Object.values(value), ...prevState];\n  // });\n\n  let orderedList = tweetArrayDB.sort(function (a, b) {\n    return new Date(b.date) - new Date(a.date);\n  });\n  var perChunk = 2; // items per chunk    \n\n  var inputArray = ['a', 'b', 'c', 'd', 'e'];\n  var result = inputArray.reduce((resultArray, item, index) => {\n    const chunkIndex = Math.floor(index / perChunk);\n\n    if (!resultArray[chunkIndex]) {\n      resultArray[chunkIndex] = []; // start a new chunk\n    }\n\n    resultArray[chunkIndex].push(item);\n    return resultArray;\n  }, []);\n  console.log(result);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"list\",\n    children: orderedList.map(e => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"list_item\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"list-item-data\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: e.userName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: e.date\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 16\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"list-item-tweet\",\n          children: e.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 14\n        }, this)]\n      }, e.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n\n_s(List, \"G2SkDKr/gQQ6d8ii8VkN3r2Qkqk=\");\n\n_c = List;\nexport default List;\n\nvar _c;\n\n$RefreshReg$(_c, \"List\");","map":{"version":3,"sources":["/Users/javiercosio/Documents/ITC/tweet-react-project/src/components/List.js"],"names":["useContext","useEffect","useState","axios","AppContext","firebase","List","appContext","tweetArrayDB","setTweetArrayDB","dbRef","database","ref","child","get","then","snapshot","exists","Object","values","val","console","log","catch","error","orderedList","sort","a","b","Date","date","perChunk","inputArray","result","reduce","resultArray","item","index","chunkIndex","Math","floor","push","map","e","userName","content","id"],"mappings":"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","sourcesContent":["import { useContext, useEffect, useState } from \"react\";\nimport \"../App.css\";\nimport axios from \"axios\";\nimport AppContext from \"../context/AppContext\";\nimport firebase from \"../lib/firebase\";\n\nfunction List() {\n  const appContext = useContext(AppContext);\n  const [tweetArrayDB, setTweetArrayDB] = useState([]);\n\n  useEffect(() => {\n    // axios\n    //   .get(\n    //     \"https://micro-blogging-dot-full-stack-course-services.ew.r.appspot.com/tweet\"\n    //   )\n    //   .then((res) => {\n    //     appContext.setTweetsDB(res.data.tweets);\n    //   });\n\n    const dbRef = firebase.database().ref();\n    dbRef\n      .child(\"tweets\")\n      .get()\n      .then((snapshot) => {\n        if (snapshot.exists()) {\n          //console.log(snapshot.val());\n          //console.log(Object.values(snapshot.val()));\n\n          setTweetArrayDB(Object.values(snapshot.val()));\n        } else {\n          console.log(\"No data available\");\n        }\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  });\n\n  // useEffect(() => {\n  //   console.log(tweetArrayDB);\n  // }, [])\n\n  // setTweetArrayDB((prevState) => {\n  //   return [Object.values(value), ...prevState];\n  // });\n\n  let orderedList = tweetArrayDB.sort(function (a, b) {\n    return new Date(b.date) - new Date(a.date);\n  });\n\n  var perChunk = 2 // items per chunk    \n\nvar inputArray = ['a','b','c','d','e']\n\nvar result = inputArray.reduce((resultArray, item, index) => { \n  const chunkIndex = Math.floor(index/perChunk)\n\n  if(!resultArray[chunkIndex]) {\n    resultArray[chunkIndex] = [] // start a new chunk\n  }\n\n  resultArray[chunkIndex].push(item)\n\n  return resultArray\n}, [])\n\nconsole.log(result);\n\n  return (\n    <div className=\"list\">\n      {/* List */}\n\n      {orderedList.map((e) => {\n        return (\n          <div className=\"list_item\" key={e.id}>\n            <div className=\"list-item-data\">\n              <div>{e.userName}</div>\n              {<div>{e.date}</div>}\n            </div>\n            {<div className=\"list-item-tweet\">{e.content}</div>}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default List;\n"]},"metadata":{},"sourceType":"module"}