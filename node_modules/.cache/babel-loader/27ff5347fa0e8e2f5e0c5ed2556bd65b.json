{"ast":null,"code":"import _slicedToArray from\"/Users/javiercosio/Documents/ITC/tweet-react-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useContext,useEffect,useState}from\"react\";import\"../App.css\";import axios from\"axios\";import AppContext from\"../context/AppContext\";import firebase from\"../lib/firebase\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function List(){var appContext=useContext(AppContext);var _useState=useState([]),_useState2=_slicedToArray(_useState,2),tweetArrayDB=_useState2[0],setTweetArrayDB=_useState2[1];useEffect(function(){// axios\n//   .get(\n//     \"https://micro-blogging-dot-full-stack-course-services.ew.r.appspot.com/tweet\"\n//   )\n//   .then((res) => {\n//     appContext.setTweetsDB(res.data.tweets);\n//   });\nvar dbRef=firebase.database().ref();dbRef.child(\"tweets\").get().then(function(snapshot){if(snapshot.exists()){//console.log(snapshot.val());\n//console.log(Object.values(snapshot.val()));\nsetTweetArrayDB(Object.values(snapshot.val()));}else{console.log(\"No data available\");}}).catch(function(error){console.error(error);});});// useEffect(() => {\n//   console.log(tweetArrayDB);\n// }, [])\n// setTweetArrayDB((prevState) => {\n//   return [Object.values(value), ...prevState];\n// });\nvar orderedList=tweetArrayDB.sort(function(a,b){return new Date(b.date)-new Date(a.date);});return/*#__PURE__*/_jsx(\"div\",{className:\"list\",children:orderedList.map(function(e){return/*#__PURE__*/_jsxs(\"div\",{className:\"list_item\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"list-item-data\",children:[/*#__PURE__*/_jsx(\"div\",{children:e.userName}),/*#__PURE__*/_jsx(\"div\",{children:e.date})]}),/*#__PURE__*/_jsx(\"div\",{className:\"list-item-tweet\",children:e.content})]},e.id);})});}export default List;","map":{"version":3,"sources":["/Users/javiercosio/Documents/ITC/tweet-react-project/src/components/List.js"],"names":["useContext","useEffect","useState","axios","AppContext","firebase","List","appContext","tweetArrayDB","setTweetArrayDB","dbRef","database","ref","child","get","then","snapshot","exists","Object","values","val","console","log","catch","error","orderedList","sort","a","b","Date","date","map","e","userName","content","id"],"mappings":"2KAAA,OAASA,UAAT,CAAqBC,SAArB,CAAgCC,QAAhC,KAAgD,OAAhD,CACA,MAAO,YAAP,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,UAAP,KAAuB,uBAAvB,CACA,MAAOC,CAAAA,QAAP,KAAqB,iBAArB,C,wFAEA,QAASC,CAAAA,IAAT,EAAgB,CACd,GAAMC,CAAAA,UAAU,CAAGP,UAAU,CAACI,UAAD,CAA7B,CACA,cAAwCF,QAAQ,CAAC,EAAD,CAAhD,wCAAOM,YAAP,eAAqBC,eAArB,eAEAR,SAAS,CAAC,UAAM,CACd;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,GAAMS,CAAAA,KAAK,CAAGL,QAAQ,CAACM,QAAT,GAAoBC,GAApB,EAAd,CACAF,KAAK,CACFG,KADH,CACS,QADT,EAEGC,GAFH,GAGGC,IAHH,CAGQ,SAACC,QAAD,CAAc,CAClB,GAAIA,QAAQ,CAACC,MAAT,EAAJ,CAAuB,CACrB;AACA;AAEAR,eAAe,CAACS,MAAM,CAACC,MAAP,CAAcH,QAAQ,CAACI,GAAT,EAAd,CAAD,CAAf,CACD,CALD,IAKO,CACLC,OAAO,CAACC,GAAR,CAAY,mBAAZ,EACD,CACF,CAZH,EAaGC,KAbH,CAaS,SAACC,KAAD,CAAW,CAChBH,OAAO,CAACG,KAAR,CAAcA,KAAd,EACD,CAfH,EAgBD,CA1BQ,CAAT,CA4BA;AACA;AACA;AAEA;AACA;AACA;AAEA,GAAIC,CAAAA,WAAW,CAAGjB,YAAY,CAACkB,IAAb,CAAkB,SAAUC,CAAV,CAAaC,CAAb,CAAgB,CAClD,MAAO,IAAIC,CAAAA,IAAJ,CAASD,CAAC,CAACE,IAAX,EAAmB,GAAID,CAAAA,IAAJ,CAASF,CAAC,CAACG,IAAX,CAA1B,CACD,CAFiB,CAAlB,CAIA,mBACE,YAAK,SAAS,CAAC,MAAf,UAEGL,WAAW,CAACM,GAAZ,CAAgB,SAACC,CAAD,CAAO,CACtB,mBACE,aAAK,SAAS,CAAC,WAAf,wBACE,aAAK,SAAS,CAAC,gBAAf,wBACE,qBAAMA,CAAC,CAACC,QAAR,EADF,cAEG,qBAAMD,CAAC,CAACF,IAAR,EAFH,GADF,cAKG,YAAK,SAAS,CAAC,iBAAf,UAAkCE,CAAC,CAACE,OAApC,EALH,GAAgCF,CAAC,CAACG,EAAlC,CADF,CASD,CAVA,CAFH,EADF,CAgBD,CAED,cAAe7B,CAAAA,IAAf","sourcesContent":["import { useContext, useEffect, useState } from \"react\";\nimport \"../App.css\";\nimport axios from \"axios\";\nimport AppContext from \"../context/AppContext\";\nimport firebase from \"../lib/firebase\";\n\nfunction List() {\n  const appContext = useContext(AppContext);\n  const [tweetArrayDB, setTweetArrayDB] = useState([]);\n\n  useEffect(() => {\n    // axios\n    //   .get(\n    //     \"https://micro-blogging-dot-full-stack-course-services.ew.r.appspot.com/tweet\"\n    //   )\n    //   .then((res) => {\n    //     appContext.setTweetsDB(res.data.tweets);\n    //   });\n\n    const dbRef = firebase.database().ref();\n    dbRef\n      .child(\"tweets\")\n      .get()\n      .then((snapshot) => {\n        if (snapshot.exists()) {\n          //console.log(snapshot.val());\n          //console.log(Object.values(snapshot.val()));\n\n          setTweetArrayDB(Object.values(snapshot.val()));\n        } else {\n          console.log(\"No data available\");\n        }\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  });\n\n  // useEffect(() => {\n  //   console.log(tweetArrayDB);\n  // }, [])\n\n  // setTweetArrayDB((prevState) => {\n  //   return [Object.values(value), ...prevState];\n  // });\n\n  let orderedList = tweetArrayDB.sort(function (a, b) {\n    return new Date(b.date) - new Date(a.date);\n  });\n\n  return (\n    <div className=\"list\">\n      {/* List */}\n      {orderedList.map((e) => {\n        return (\n          <div className=\"list_item\" key={e.id}>\n            <div className=\"list-item-data\">\n              <div>{e.userName}</div>\n              {<div>{e.date}</div>}\n            </div>\n            {<div className=\"list-item-tweet\">{e.content}</div>}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default List;\n"]},"metadata":{},"sourceType":"module"}