{"ast":null,"code":"var _jsxFileName = \"/Users/javiercosio/Documents/ITC/tweet-react-project/src/components/List.js\",\n    _s = $RefreshSig$();\n\nimport { useContext, useEffect, useState, useRef, useCallback } from \"react\";\nimport \"../App.css\";\nimport axios from \"axios\";\nimport AppContext from \"../context/AppContext\";\nimport firebase from \"../lib/firebase\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction List() {\n  _s();\n\n  const appContext = useContext(AppContext);\n  const [tweetArrayDB, setTweetArrayDB] = useState([]);\n  const observer = useRef();\n  const lastTweetRef = useCallback();\n  useEffect(() => {\n    // axios\n    //   .get(\n    //     \"https://micro-blogging-dot-full-stack-course-services.ew.r.appspot.com/tweet\"\n    //   )\n    //   .then((res) => {\n    //     appContext.setTweetsDB(res.data.tweets);\n    //   });\n    const dbRef = firebase.database().ref();\n    dbRef.child(\"tweets\").get().then(snapshot => {\n      if (snapshot.exists()) {\n        //console.log(snapshot.val());\n        //console.log(Object.values(snapshot.val()));\n        setTweetArrayDB(Object.values(snapshot.val()));\n      } else {\n        console.log(\"No data available\");\n      }\n    }).catch(error => {\n      console.error(error);\n    });\n  }); // useEffect(() => {\n  //   console.log(tweetArrayDB);\n  // }, [])\n  // setTweetArrayDB((prevState) => {\n  //   return [Object.values(value), ...prevState];\n  // });\n\n  let orderedList = tweetArrayDB.sort(function (a, b) {\n    return new Date(b.date) - new Date(a.date);\n  });\n  var perChunk = 10; // items per chunk\n\n  var result = orderedList.reduce((resultArray, item, index) => {\n    const chunkIndex = Math.floor(index / perChunk);\n\n    if (!resultArray[chunkIndex]) {\n      resultArray[chunkIndex] = []; // start a new chunk\n    }\n\n    resultArray[chunkIndex].push(item);\n    return resultArray;\n  }, []); //console.log(result);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"list\",\n    children: result.map(e => {\n      e.map(tweet => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: lastTweetRef,\n          className: \"list_item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"list-item-data\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: e.userName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: e.date\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 18\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"list-item-tweet\",\n            children: e.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 16\n          }, this)]\n        }, e.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this);\n      });\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}\n\n_s(List, \"hG0U1UdBpRtaM4EdcREXeLmIV4s=\");\n\n_c = List;\nexport default List;\n\nvar _c;\n\n$RefreshReg$(_c, \"List\");","map":{"version":3,"sources":["/Users/javiercosio/Documents/ITC/tweet-react-project/src/components/List.js"],"names":["useContext","useEffect","useState","useRef","useCallback","axios","AppContext","firebase","List","appContext","tweetArrayDB","setTweetArrayDB","observer","lastTweetRef","dbRef","database","ref","child","get","then","snapshot","exists","Object","values","val","console","log","catch","error","orderedList","sort","a","b","Date","date","perChunk","result","reduce","resultArray","item","index","chunkIndex","Math","floor","push","map","e","tweet","userName","content","id"],"mappings":";;;AAAA,SAASA,UAAT,EAAqBC,SAArB,EAAgCC,QAAhC,EAA0CC,MAA1C,EAAkDC,WAAlD,QAAqE,OAArE;AACA,OAAO,YAAP;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AACA,OAAOC,QAAP,MAAqB,iBAArB;;;AAEA,SAASC,IAAT,GAAgB;AAAA;;AACd,QAAMC,UAAU,GAAGT,UAAU,CAACM,UAAD,CAA7B;AACA,QAAM,CAACI,YAAD,EAAeC,eAAf,IAAkCT,QAAQ,CAAC,EAAD,CAAhD;AAEA,QAAMU,QAAQ,GAAGT,MAAM,EAAvB;AACA,QAAMU,YAAY,GAAGT,WAAW,EAAhC;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,UAAMa,KAAK,GAAGP,QAAQ,CAACQ,QAAT,GAAoBC,GAApB,EAAd;AACAF,IAAAA,KAAK,CACFG,KADH,CACS,QADT,EAEGC,GAFH,GAGGC,IAHH,CAGSC,QAAD,IAAc;AAClB,UAAIA,QAAQ,CAACC,MAAT,EAAJ,EAAuB;AACrB;AACA;AAEAV,QAAAA,eAAe,CAACW,MAAM,CAACC,MAAP,CAAcH,QAAQ,CAACI,GAAT,EAAd,CAAD,CAAf;AACD,OALD,MAKO;AACLC,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACD;AACF,KAZH,EAaGC,KAbH,CAaUC,KAAD,IAAW;AAChBH,MAAAA,OAAO,CAACG,KAAR,CAAcA,KAAd;AACD,KAfH;AAgBD,GA1BQ,CAAT,CAPc,CAmCd;AACA;AACA;AAEA;AACA;AACA;;AAEA,MAAIC,WAAW,GAAGnB,YAAY,CAACoB,IAAb,CAAkB,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAClD,WAAO,IAAIC,IAAJ,CAASD,CAAC,CAACE,IAAX,IAAmB,IAAID,IAAJ,CAASF,CAAC,CAACG,IAAX,CAA1B;AACD,GAFiB,CAAlB;AAIA,MAAIC,QAAQ,GAAG,EAAf,CA/Cc,CA+CK;;AAEnB,MAAIC,MAAM,GAAGP,WAAW,CAACQ,MAAZ,CAAmB,CAACC,WAAD,EAAcC,IAAd,EAAoBC,KAApB,KAA8B;AAC5D,UAAMC,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWH,KAAK,GAAGL,QAAnB,CAAnB;;AAEA,QAAI,CAACG,WAAW,CAACG,UAAD,CAAhB,EAA8B;AAC5BH,MAAAA,WAAW,CAACG,UAAD,CAAX,GAA0B,EAA1B,CAD4B,CACE;AAC/B;;AAEDH,IAAAA,WAAW,CAACG,UAAD,CAAX,CAAwBG,IAAxB,CAA6BL,IAA7B;AAEA,WAAOD,WAAP;AACD,GAVY,EAUV,EAVU,CAAb,CAjDc,CA6Dd;;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,cAGGF,MAAM,CAACS,GAAP,CAAYC,CAAD,IAAO;AAEjBA,MAAAA,CAAC,CAACD,GAAF,CAAOE,KAAD,IAAW;AAEf,4BACE;AAAK,UAAA,GAAG,EAAElC,YAAV;AAAwB,UAAA,SAAS,EAAC,WAAlC;AAAA,kCACE;AAAK,YAAA,SAAS,EAAC,gBAAf;AAAA,oCACE;AAAA,wBAAMiC,CAAC,CAACE;AAAR;AAAA;AAAA;AAAA;AAAA,oBADF,eAEG;AAAA,wBAAMF,CAAC,CAACZ;AAAR;AAAA;AAAA;AAAA;AAAA,oBAFH;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAKG;AAAK,YAAA,SAAS,EAAC,iBAAf;AAAA,sBAAkCY,CAAC,CAACG;AAApC;AAAA;AAAA;AAAA;AAAA,kBALH;AAAA,WAAmDH,CAAC,CAACI,EAArD;AAAA;AAAA;AAAA;AAAA,gBADF;AAUD,OAZD;AAkBD,KApBA;AAHH;AAAA;AAAA;AAAA;AAAA,UADF;AA2BD;;GA1FQ1C,I;;KAAAA,I;AA4FT,eAAeA,IAAf","sourcesContent":["import { useContext, useEffect, useState, useRef, useCallback } from \"react\";\nimport \"../App.css\";\nimport axios from \"axios\";\nimport AppContext from \"../context/AppContext\";\nimport firebase from \"../lib/firebase\";\n\nfunction List() {\n  const appContext = useContext(AppContext);\n  const [tweetArrayDB, setTweetArrayDB] = useState([]);\n\n  const observer = useRef();\n  const lastTweetRef = useCallback()\n\n  useEffect(() => {\n    // axios\n    //   .get(\n    //     \"https://micro-blogging-dot-full-stack-course-services.ew.r.appspot.com/tweet\"\n    //   )\n    //   .then((res) => {\n    //     appContext.setTweetsDB(res.data.tweets);\n    //   });\n\n    const dbRef = firebase.database().ref();\n    dbRef\n      .child(\"tweets\")\n      .get()\n      .then((snapshot) => {\n        if (snapshot.exists()) {\n          //console.log(snapshot.val());\n          //console.log(Object.values(snapshot.val()));\n\n          setTweetArrayDB(Object.values(snapshot.val()));\n        } else {\n          console.log(\"No data available\");\n        }\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  });\n\n  // useEffect(() => {\n  //   console.log(tweetArrayDB);\n  // }, [])\n\n  // setTweetArrayDB((prevState) => {\n  //   return [Object.values(value), ...prevState];\n  // });\n\n  let orderedList = tweetArrayDB.sort(function (a, b) {\n    return new Date(b.date) - new Date(a.date);\n  });\n\n  var perChunk = 10; // items per chunk\n\n  var result = orderedList.reduce((resultArray, item, index) => {\n    const chunkIndex = Math.floor(index / perChunk);\n\n    if (!resultArray[chunkIndex]) {\n      resultArray[chunkIndex] = []; // start a new chunk\n    }\n\n    resultArray[chunkIndex].push(item);\n\n    return resultArray;\n  }, []);\n\n  //console.log(result);\n\n  return (\n    <div className=\"list\">\n      {/* List */}\n\n      {result.map((e) => {\n\n        e.map((tweet) => {\n\n          return (\n            <div ref={lastTweetRef} className=\"list_item\" key={e.id}>\n              <div className=\"list-item-data\">\n                <div>{e.userName}</div>\n                {<div>{e.date}</div>}\n              </div>\n              {<div className=\"list-item-tweet\">{e.content}</div>}\n            </div>\n          );\n\n        })\n\n\n        \n\n\n      })}\n    </div>\n  );\n}\n\nexport default List;\n"]},"metadata":{},"sourceType":"module"}