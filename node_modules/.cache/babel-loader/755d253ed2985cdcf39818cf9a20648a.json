{"ast":null,"code":"var _jsxFileName = \"/Users/javiercosio/Documents/ITC/tweet-react-project/src/components/List.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport \"../App.css\";\nimport firebase from \"../lib/firebase\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction List() {\n  _s();\n\n  const [tweetArrayDB, setTweetArrayDB] = useState([]);\n  useEffect(() => {\n    const dbRef = firebase.database().ref();\n    dbRef.child(\"tweets\").get().then(snapshot => {\n      if (snapshot.exists()) {\n        setTweetArrayDB(Object.values(snapshot.val()));\n      } else {\n        console.log(\"No data available\");\n      }\n    }).catch(error => {\n      console.error(error);\n    });\n  });\n  let orderedList = tweetArrayDB.sort(function (a, b) {\n    return new Date(b.date) - new Date(a.date);\n  });\n  var perChunk = 10; // items per chunk\n\n  var result = orderedList.reduce((resultArray, item, index) => {\n    const chunkIndex = Math.floor(index / perChunk);\n\n    if (!resultArray[chunkIndex]) {\n      resultArray[chunkIndex] = []; // start a new chunk\n    }\n\n    resultArray[chunkIndex].push(item);\n    return resultArray;\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"list\",\n    children: orderedList.map(e => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: lastTweetRef,\n        className: \"list_item\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"list-item-data\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: e.userName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: e.date\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 16\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"list-item-tweet\",\n          children: e.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 14\n        }, this)]\n      }, e.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n\n_s(List, \"9lAlCAZj6H8CTI4xRawXoRKkBek=\");\n\n_c = List;\nexport default List;\n\nvar _c;\n\n$RefreshReg$(_c, \"List\");","map":{"version":3,"sources":["/Users/javiercosio/Documents/ITC/tweet-react-project/src/components/List.js"],"names":["useEffect","useState","firebase","List","tweetArrayDB","setTweetArrayDB","dbRef","database","ref","child","get","then","snapshot","exists","Object","values","val","console","log","catch","error","orderedList","sort","a","b","Date","date","perChunk","result","reduce","resultArray","item","index","chunkIndex","Math","floor","push","map","e","lastTweetRef","userName","content","id"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAO,YAAP;AACA,OAAOC,QAAP,MAAqB,iBAArB;;;AAEA,SAASC,IAAT,GAAgB;AAAA;;AACd,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCJ,QAAQ,CAAC,EAAD,CAAhD;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMM,KAAK,GAAGJ,QAAQ,CAACK,QAAT,GAAoBC,GAApB,EAAd;AACAF,IAAAA,KAAK,CACFG,KADH,CACS,QADT,EAEGC,GAFH,GAGGC,IAHH,CAGSC,QAAD,IAAc;AAClB,UAAIA,QAAQ,CAACC,MAAT,EAAJ,EAAuB;AACrBR,QAAAA,eAAe,CAACS,MAAM,CAACC,MAAP,CAAcH,QAAQ,CAACI,GAAT,EAAd,CAAD,CAAf;AACD,OAFD,MAEO;AACLC,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACD;AACF,KATH,EAUGC,KAVH,CAUUC,KAAD,IAAW;AAChBH,MAAAA,OAAO,CAACG,KAAR,CAAcA,KAAd;AACD,KAZH;AAaD,GAfQ,CAAT;AAiBA,MAAIC,WAAW,GAAGjB,YAAY,CAACkB,IAAb,CAAkB,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAClD,WAAO,IAAIC,IAAJ,CAASD,CAAC,CAACE,IAAX,IAAmB,IAAID,IAAJ,CAASF,CAAC,CAACG,IAAX,CAA1B;AACD,GAFiB,CAAlB;AAIA,MAAIC,QAAQ,GAAG,EAAf,CAxBc,CAwBK;;AAEnB,MAAIC,MAAM,GAAGP,WAAW,CAACQ,MAAZ,CAAmB,CAACC,WAAD,EAAcC,IAAd,EAAoBC,KAApB,KAA8B;AAC5D,UAAMC,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWH,KAAK,GAAGL,QAAnB,CAAnB;;AAEA,QAAI,CAACG,WAAW,CAACG,UAAD,CAAhB,EAA8B;AAC5BH,MAAAA,WAAW,CAACG,UAAD,CAAX,GAA0B,EAA1B,CAD4B,CACE;AAC/B;;AAEDH,IAAAA,WAAW,CAACG,UAAD,CAAX,CAAwBG,IAAxB,CAA6BL,IAA7B;AAEA,WAAOD,WAAP;AACD,GAVY,EAUV,EAVU,CAAb;AAYA,sBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,cAGGT,WAAW,CAACgB,GAAZ,CAAiBC,CAAD,IAAO;AACtB,0BACE;AAAK,QAAA,GAAG,EAAEC,YAAV;AAAwB,QAAA,SAAS,EAAC,WAAlC;AAAA,gCACE;AAAK,UAAA,SAAS,EAAC,gBAAf;AAAA,kCACE;AAAA,sBAAMD,CAAC,CAACE;AAAR;AAAA;AAAA;AAAA;AAAA,kBADF,eAEG;AAAA,sBAAMF,CAAC,CAACZ;AAAR;AAAA;AAAA;AAAA;AAAA,kBAFH;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAKG;AAAK,UAAA,SAAS,EAAC,iBAAf;AAAA,oBAAkCY,CAAC,CAACG;AAApC;AAAA;AAAA;AAAA;AAAA,gBALH;AAAA,SAAmDH,CAAC,CAACI,EAArD;AAAA;AAAA;AAAA;AAAA,cADF;AASD,KAVA;AAHH;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD;;GAvDQvC,I;;KAAAA,I;AAyDT,eAAeA,IAAf","sourcesContent":["import { useEffect, useState } from \"react\";\nimport \"../App.css\";\nimport firebase from \"../lib/firebase\";\n\nfunction List() {\n  const [tweetArrayDB, setTweetArrayDB] = useState([]);\n\n  useEffect(() => {\n    const dbRef = firebase.database().ref();\n    dbRef\n      .child(\"tweets\")\n      .get()\n      .then((snapshot) => {\n        if (snapshot.exists()) {\n          setTweetArrayDB(Object.values(snapshot.val()));\n        } else {\n          console.log(\"No data available\");\n        }\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  });\n\n  let orderedList = tweetArrayDB.sort(function (a, b) {\n    return new Date(b.date) - new Date(a.date);\n  });\n\n  var perChunk = 10; // items per chunk\n\n  var result = orderedList.reduce((resultArray, item, index) => {\n    const chunkIndex = Math.floor(index / perChunk);\n\n    if (!resultArray[chunkIndex]) {\n      resultArray[chunkIndex] = []; // start a new chunk\n    }\n\n    resultArray[chunkIndex].push(item);\n\n    return resultArray;\n  }, []);\n\n  return (\n    <div className=\"list\">\n      {/* List */}\n\n      {orderedList.map((e) => {\n        return (\n          <div ref={lastTweetRef} className=\"list_item\" key={e.id}>\n            <div className=\"list-item-data\">\n              <div>{e.userName}</div>\n              {<div>{e.date}</div>}\n            </div>\n            {<div className=\"list-item-tweet\">{e.content}</div>}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default List;\n"]},"metadata":{},"sourceType":"module"}