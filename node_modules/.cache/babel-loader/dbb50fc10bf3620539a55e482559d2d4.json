{"ast":null,"code":"import _toConsumableArray from\"/Users/javiercosio/Documents/ITC/tweet-react-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import{useContext,useEffect}from\"react\";import\"../App.css\";import{formatISO}from\"date-fns\";import axios from\"axios\";import AppContext from\"../context/AppContext\";import firebase from\"../lib/firebase\";import cryptoRandomString from'crypto-random-string';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function Form(){var appContext=useContext(AppContext);var userLogin=firebase.auth().currentUser;if(userLogin!==null){// The userLogin object has basic properties such as display name, email, etc.\nvar displayName=userLogin.displayName;var email=userLogin.email;var photoURL=userLogin.photoURL;var emailVerified=userLogin.emailVerified;// The user's ID, unique to the Firebase project. Do NOT use\n// this value to authenticate with your backend server, if\n// you have one. Use User.getToken() instead.\nvar uid=userLogin.uid;}var handleChangeNote=function handleChangeNote(e){var charCount=e.target.value.length;var charLeft=140-charCount;appContext.setCarsLeft(charLeft);appContext.setNoteInput(e.target.value);};// useEffect(() => {\n//   console.log(appContext.carsLeft);\n// }, [appContext.carsLeft]);\nvar handleSubmit=function handleSubmit(){appContext.setIsFormComplete(false);appContext.setLoadingActive(true);setTimeout(function(){if(appContext.carsLeft>0){var finalData=appContext.formData;finalData[\"date\"]=formatISO(new Date(),\"dd-MM-yyyy HH:mm:ss\");appContext.setNotesArray(function(prevState){return[finalData].concat(_toConsumableArray(prevState));});appContext.setNoteInput(\"\");appContext.setFormData({});//console.log(finalData);\nvar _userLogin=firebase.auth().currentUser;if(_userLogin!==null){// The userLogin object has basic properties such as display name, email, etc.\nvar _displayName=_userLogin.displayName;var _email=_userLogin.email;var _photoURL=_userLogin.photoURL;var _emailVerified=_userLogin.emailVerified;// The user's ID, unique to the Firebase project. Do NOT use\n// this value to authenticate with your backend server, if\n// you have one. Use User.getToken() instead.\nvar _uid=_userLogin.uid;firebase.database().ref(\"tweets/\"+_userLogin.uid+\"_\"+new Date()).set(finalData);}// axios.post('https://micro-blogging-dot-full-stack-course-services.ew.r.appspot.com/tweet', finalData)\n// .then(res => {\n//   console.log(res);\n// })\n// .catch(err => {\n//   console.error(err);\n// })\n// localStorage.setItem(finalData[\"id\"], JSON.stringify(finalData));\nappContext.setLoadingActive(false);}},500);};return/*#__PURE__*/_jsxs(\"div\",{className:\"form-wrapper\",children:[/*#__PURE__*/_jsx(\"textarea\",{className:\"tweet-form\",onChange:handleChangeNote,type:\"text\",placeholder:\"What you have in mind...\",value:appContext.noteInput}),/*#__PURE__*/_jsxs(\"div\",{className:\"tweet-bottom\",children:[/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"div\",{className:\"tweet-error-\".concat(appContext.alert),children:\"The tweet can't contain more then 140 chars.\"})}),/*#__PURE__*/_jsx(\"div\",{children:\" \"}),/*#__PURE__*/_jsxs(\"div\",{className:\"tweet-button\",children:[/*#__PURE__*/_jsx(\"img\",{className:\"loading-\".concat(appContext.loadingActive),src:\"/loadingLogo.svg\",alt:\"loading\"}),/*#__PURE__*/_jsx(\"button\",{disabled:!appContext.isFormComplete,className:\"submit-button-\".concat(!appContext.isFormComplete,\" tweet\"),onClick:handleSubmit,children:\"Tweet\"})]})]})]});}export default Form;","map":{"version":3,"sources":["/Users/javiercosio/Documents/ITC/tweet-react-project/src/components/Form.js"],"names":["useContext","useEffect","formatISO","axios","AppContext","firebase","cryptoRandomString","Form","appContext","userLogin","auth","currentUser","displayName","email","photoURL","emailVerified","uid","handleChangeNote","e","charCount","target","value","length","charLeft","setCarsLeft","setNoteInput","handleSubmit","setIsFormComplete","setLoadingActive","setTimeout","carsLeft","finalData","formData","Date","setNotesArray","prevState","setFormData","database","ref","set","noteInput","alert","loadingActive","isFormComplete"],"mappings":"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","sourcesContent":["import { useContext, useEffect } from \"react\";\nimport \"../App.css\";\nimport { formatISO } from \"date-fns\";\nimport axios from \"axios\";\nimport AppContext from \"../context/AppContext\";\nimport firebase from \"../lib/firebase\";\nimport cryptoRandomString from 'crypto-random-string';\n\n\n\nfunction Form() {\n  const appContext = useContext(AppContext);\n\n  const userLogin = firebase.auth().currentUser;\n\n  if (userLogin !== null) {\n    // The userLogin object has basic properties such as display name, email, etc.\n    const displayName = userLogin.displayName;\n    const email = userLogin.email;\n    const photoURL = userLogin.photoURL;\n    const emailVerified = userLogin.emailVerified;\n\n    // The user's ID, unique to the Firebase project. Do NOT use\n    // this value to authenticate with your backend server, if\n    // you have one. Use User.getToken() instead.\n    const uid = userLogin.uid;\n    \n  }\n\n  const handleChangeNote = (e) => {\n    const charCount = e.target.value.length;\n    let charLeft = 140 - charCount;\n    appContext.setCarsLeft(charLeft);\n    appContext.setNoteInput(e.target.value);\n  };\n\n  // useEffect(() => {\n  //   console.log(appContext.carsLeft);\n  // }, [appContext.carsLeft]);\n\n  const handleSubmit = () => {\n    appContext.setIsFormComplete(false);\n    appContext.setLoadingActive(true);\n    setTimeout(() => {\n      if (appContext.carsLeft > 0) {\n        const finalData = appContext.formData;\n\n        finalData[\"date\"] = formatISO(new Date(), \"dd-MM-yyyy HH:mm:ss\");\n\n        appContext.setNotesArray((prevState) => {\n          return [finalData, ...prevState];\n        });\n\n        appContext.setNoteInput(\"\");\n        appContext.setFormData({});\n\n        //console.log(finalData);\n\n        const userLogin = firebase.auth().currentUser;\n        if (userLogin !== null) {\n          // The userLogin object has basic properties such as display name, email, etc.\n          const displayName = userLogin.displayName;\n          const email = userLogin.email;\n          const photoURL = userLogin.photoURL;\n          const emailVerified = userLogin.emailVerified;\n\n          // The user's ID, unique to the Firebase project. Do NOT use\n          // this value to authenticate with your backend server, if\n          // you have one. Use User.getToken() instead.\n          const uid = userLogin.uid;\n\n        \n\n          firebase\n          .database()\n          .ref(\"tweets/\" + userLogin.uid +\"_\"+ new Date())\n          .set(finalData);\n        }\n\n        // axios.post('https://micro-blogging-dot-full-stack-course-services.ew.r.appspot.com/tweet', finalData)\n        // .then(res => {\n        //   console.log(res);\n        // })\n        // .catch(err => {\n        //   console.error(err);\n        // })\n\n        // localStorage.setItem(finalData[\"id\"], JSON.stringify(finalData));\n        appContext.setLoadingActive(false);\n      }\n    }, 500);\n  };\n\n  return (\n    <div className=\"form-wrapper\">\n      <textarea\n        className=\"tweet-form\"\n        onChange={handleChangeNote}\n        type=\"text\"\n        placeholder=\"What you have in mind...\"\n        value={appContext.noteInput}\n      />\n      <div className=\"tweet-bottom\">\n        <div>\n          <div className={`tweet-error-${appContext.alert}`}>\n            The tweet can't contain more then 140 chars.\n          </div>\n        </div>\n        <div> </div>\n        <div className=\"tweet-button\">\n          <img\n            className={`loading-${appContext.loadingActive}`}\n            src=\"/loadingLogo.svg\"\n            alt=\"loading\"\n          ></img>\n          <button\n            disabled={!appContext.isFormComplete}\n            className={`submit-button-${!appContext.isFormComplete} tweet`}\n            onClick={handleSubmit}\n          >\n            Tweet\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Form;\n"]},"metadata":{},"sourceType":"module"}